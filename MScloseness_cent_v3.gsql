CREATE QUERY MScloseness_cent_v3(SET<STRING> v_type, SET<STRING> e_type,STRING re_type,INT max_hops=10,
  INT top_k=100, BOOL wf = TRUE, BOOL print_accum = True, STRING result_attr = "",
  STRING file_path = "", BOOL display_edges = FALSE){ 
  /* Compute Closeness Centrality for each VERTEX. 
  Use multi-sourse BFS.
  Link of the paper: http://www.vldb.org/pvldb/vol8/p449-then.pdf
  Parameters:
  v_type: vertex types to traverse                 print_accum: print JSON output
  e_type: edge types to traverse                   result_attr: INT attr to store results to
  max_hops: look only this far from each vertex    file_path: file to write CSV output to
  top_k: report only this many top scores          display_edges: output edges for visualization
  wf: Wasserman and Faust normalization factor for multi-component graphs */ 
  TYPEDEF TUPLE<VERTEX Vertex_ID, FLOAT score> VertexScore;
	HeapAccum<VertexScore>(top_k, score DESC) @@topScores;
  SumAccum<INT> @@currDist; #current distance
  
  SumAccum<INT> @res; #Result, sum of distance
  SumAccum<INT> @size; #get graph size
  SumAccum<FLOAT> @score;
  BitwiseOrAccum @seen;
  BitwiseOrAccum @visit;
  BitwiseOrAccum @visitNext; #use bitwise instead of setAccum
  BitwiseOrAccum @seen1;
  BitwiseOrAccum @visit1;
  BitwiseOrAccum @visitNext1; #use bitwise instead of SetAccum
  BitwiseOrAccum @seen2;
  BitwiseOrAccum @visit2;
  BitwiseOrAccum @visitNext2; #use bitwise instead of SetAccum
  BitwiseOrAccum @seen3;
  BitwiseOrAccum @visit3;
  BitwiseOrAccum @visitNext3; #use bitwise instead of setAccum
  BitwiseOrAccum @seen4;
  BitwiseOrAccum @visit4;
  BitwiseOrAccum @visitNext4; #use bitwise instead of setAccum
  BitwiseOrAccum @seen5;
  BitwiseOrAccum @visit5;
  BitwiseOrAccum @visitNext5; #use bitwise instead of 
  BitwiseOrAccum @seen6;
  BitwiseOrAccum @visit6;
  BitwiseOrAccum @visitNext6; #use bitwise instead of setAccum
  SumAccum<INT> @@count=1;#used to set unique ID
  SumAccum<INT> @id; #store the unique ID
  SetAccum<INT> @@a; #used to set unique ID
  MapAccum<INT,INT> @@map; #used to set unique ID 
  SetAccum<EDGE> @@edgeSet;

  INT empty=0;
  FILE f (file_path);
	INT numVert;
  INT batch_number;

# Compute closeness	

  all = {v_type};
  
  numVert = all.size();
  batch_number = numVert/420;
  IF batch_number==0 THEN batch_number=1; END;
  #Calculate the sum of distance to other vertex for each vertex
  FOREACH i IN RANGE[0, batch_number-1] do
      Start = SELECT s FROM all:s
              WHERE getvid(s)%batch_number == i
              POST-ACCUM @@map+=(getvid(s)->0),@@a+=getvid(s);
  
      FOREACH ver in @@a DO @@map+=(ver->@@count); @@count+=1;END; #set a unique ID for each vertex, ID from 1-63
      
      Start = SELECT s FROM Start:s POST-ACCUM s.@id=@@map.get(getvid(s));
      Start = Select s FROM Start:s
            POST-ACCUM 
            IF s.@id<=60 THEN s.@seen=1<<s.@id,s.@visit=1<<s.@id
            ELSE IF s.@id/60==1 THEN s.@seen1=1<<(s.@id%60),s.@visit1=1<<(s.@id%60) 
            ELSE IF s.@id/60==2 THEN s.@seen2=1<<(s.@id%60),s.@visit2=1<<(s.@id%60)
            ELSE IF s.@id/60==3 THEN s.@seen3=1<<(s.@id%60),s.@visit3=1<<(s.@id%60)
            ELSE IF s.@id/60==4 THEN s.@seen4=1<<(s.@id%60),s.@visit4=1<<(s.@id%60)
            ELSE IF s.@id/60==5 THEN s.@seen5=1<<(s.@id%60),s.@visit5=1<<(s.@id%60)
            ELSE IF s.@id/60==6 THEN s.@seen6=1<<(s.@id%60),s.@visit6=1<<(s.@id%60)END;# set initial seen and visit s.@seen1 s.@seen2 
      @@a.clear();
      @@map.clear();
      @@count=0;
      
      WHILE (Start.size() > 0) LIMIT max_hops DO
        
            @@currDist+=1;
            Start = SELECT t FROM Start:s -(re_type:e)-v_type:t
                    WHERE s.@visit&-t.@seen-1>0 OR s.@visit1&-t.@seen1-1>0 or s.@visit2&-t.@seen2-1>0 or s.@visit3&-t.@seen3-1>0 or s.@visit4&-t.@seen4-1>0 or s.@visit6&-t.@seen6-1>0 or s.@visit5&-t.@seen5-1>0 and s!=t 
                    ACCUM
                      INT c = s.@visit&-t.@seen-1,
                      INT c1 = s.@visit1&-t.@seen1-1,
                      INT c2 = s.@visit2&-t.@seen2-1,
                      INT c3 = s.@visit3&-t.@seen3-1,
                      INT c4 = s.@visit4&-t.@seen4-1,  
                      INT c5 = s.@visit5&-t.@seen5-1,
                      INT c6 = s.@visit6&-t.@seen6-1,
                      IF c>0 THEN
                          t.@visitNext+=c,
                          t.@seen+=c
                      END,
                      IF c1>0 THEN
                          t.@visitNext1+=c1,
                          t.@seen1+=c1
                      END,
                      IF c2>0 THEN
                          t.@visitNext2+=c2,
                          t.@seen2+=c2
                      END,
                      IF c3>0 THEN
                          t.@visitNext3+=c3,
                          t.@seen3+=c3
                      END,
    IF c4>0 THEN
                          t.@visitNext4+=c4,
                          t.@seen4+=c4
                      END,
    IF c5>0 THEN
                          t.@visitNext5+=c5,
                          t.@seen5+=c5
                      END,
    IF c6>0 THEN
                          t.@visitNext6+=c6,
                          t.@seen6+=c6
                      END
                    POST-ACCUM
                        
                        t.@visit=t.@visitNext,
                        INT r = t.@visitNext,
                        t.@visit1=t.@visitNext1,
                        INT r1 = t.@visitNext1,
                        t.@visit2=t.@visitNext2,
                        INT r2 = t.@visitNext2,
                        t.@visit3=t.@visitNext3,
                        INT r3 = t.@visitNext3,
                        t.@visit4=t.@visitNext4,
                        INT r4 = t.@visitNext4,
                        t.@visit5=t.@visitNext5,
                        INT r5 = t.@visitNext5,
                        t.@visit6=t.@visitNext6,
                        INT r6 = t.@visitNext6,
                        WHILE r>0 DO 
                          r=r&(r-1),t.@res+=@@currDist,t.@size+=1 #count how many 1 in the number, same as setAccum,size()
                        END,
                    
                        t.@visitNext=0,
                        WHILE r1>0 DO 
                          r1=r1&(r1-1),t.@res+=@@currDist,t.@size+=1 #count how many 1 in the number, same as setAccum,size()
                        END,
                    
                        t.@visitNext1=0,
                        WHILE r2>0 DO 
                          r2=r2&(r2-1),t.@res+=@@currDist,t.@size+=1 #count how many 1 in the number, same as setAccum,size()
                        END,
                    
                        t.@visitNext2=0,
                        WHILE r3>0 DO 
                          r3=r3&(r3-1),t.@res+=@@currDist,t.@size+=1 #count how many 1 in the number, same as setAccum,size()
                        END,
                    
                        t.@visitNext3=0,
                        WHILE r4>0 DO 
                          r4=r4&(r4-1),t.@res+=@@currDist,t.@size+=1 #count how many 1 in the number, same as setAccum,size()
                        END,
                    
                        t.@visitNext4=0,
                        WHILE r5>0 DO 
                          r5=r5&(r5-1),t.@res+=@@currDist,t.@size+=1 #count how many 1 in the number, same as setAccum,size()
                        END,
                    
                        t.@visitNext5=0,
                        WHILE r6>0 DO 
                          r6=r6&(r6-1),t.@res+=@@currDist,t.@size+=1 #count how many 1 in the number, same as setAccum,size()
                        END,
                    
                        t.@visitNext6=0;
        END;
        @@currDist=0;
        Start = SELECT s FROM all:s 
                POST-ACCUM s.@seen=0,s.@visit=0,
    s.@seen1=0,s.@visit1=0,
    s.@seen2=0,s.@visit2=0,
    s.@seen3=0,s.@visit3=0,
    s.@seen4=0,s.@visit4=0,
    s.@seen5=0,s.@visit5=0,
    s.@seen6=0,s.@visit6=0;
  END;
  
  Start = SELECT s FROM all:s
			# Calculate Closeness Centrality for each vertex
      WHERE s.@res>0
			POST-ACCUM 
          IF wf THEN s.@score = (s.@size*1.0/(numVert-1))*(s.@size*1.0/s.@res) ELSE s.@score = s.@size*1.0/s.@res*1.0 END,
					IF result_attr != "" THEN s.setAttr(result_attr, s.@score) END,
					IF print_accum THEN @@topScores += VertexScore(s, s.@score) END,
					IF file_path != "" THEN f.println(s, s.@score) END;
      #test

#Output
	IF file_path != "" THEN
			f.println("Vertex_ID", "Closeness");
	END;

	IF print_accum THEN
		PRINT @@topScores AS top_scores;
		IF display_edges THEN
			PRINT Start[Start.@score];
			Start = SELECT s
			FROM Start:s -(e_type:e)->:t
				ACCUM @@edgeSet += e;
			PRINT @@edgeSet;
		END;
	END;
}